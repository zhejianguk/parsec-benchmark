#!/bin/bash

# OpenSSL configure wrapper for PARSEC RISC-V cross-compilation
# This script detects when we're cross-compiling for RISC-V and uses
# Configure.pl directly instead of the auto-detecting config script

# Check if we're cross-compiling for RISC-V
if [ "$PARSEC_TOOLCHAIN" = "riscv" ]; then
    echo "Detected RISC-V cross-compilation, using Configure.pl directly..."
    echo "Using CC=$CC for cross-compilation"
    
    # For RISC-V, filter out unsupported arguments and call Configure.pl
    CMD="./Configure.pl"
    
    # Add arguments one by one, filtering out unsupported ones
    for arg in "$@"; do
        case "$arg" in
            --cross-compile-prefix=*)
                # Skip this argument as OpenSSL 0.9.8 doesn't support it
                echo "Skipping unsupported argument: $arg"
                echo "Will use CC environment variable instead: $CC"
                ;;
            *)
                CMD="$CMD $arg"
                ;;
        esac
    done
    
    # Make sure CC is exported for Configure.pl to see
    export CC
    export AR
    export RANLIB
    
    echo "Executing: $CMD"
    echo "With CC=$CC, AR=$AR, RANLIB=$RANLIB"
    
    # Run Configure.pl
    $CMD
    
    # OpenSSL 0.9.8 ignores environment variables in the final Makefile
    # We need to manually fix the Makefile after configuration
    if [ -f Makefile ]; then
        echo "Fixing Makefile to use RISC-V tools..."
        
        # Fix CC
        if [ -n "$CC" ]; then
            sed -i "s|^CC= .*|CC= $CC|" Makefile
            echo "Set CC=$CC in Makefile"
        fi
        
        # Fix AR if needed
        if [ -n "$AR" ]; then
            # OpenSSL uses AR= for library creation
            sed -i "s|^AR= .*|AR= $AR|" Makefile
            echo "Set AR=$AR in Makefile"
        fi
        
        # Fix ARFLAGS - this is critical for ar to work properly
        sed -i "s|^ARFLAGS= .*|ARFLAGS= r|" Makefile
        echo "Set ARFLAGS=r in Makefile"
        
        # Also fix the ARX variable in the build_crypto target to include ARFLAGS
        # The line looks like: ARX='${AR}' ; \
        # We need to change it to: ARX='${AR} ${ARFLAGS}' ; \
        sed -i "s|ARX='\${AR}'|ARX='\${AR} \${ARFLAGS}'|g" Makefile
        echo "Fixed ARX to include ARFLAGS"
        
        # Fix RANLIB
        if [ -n "$RANLIB" ]; then
            sed -i "s|^RANLIB= .*|RANLIB= $RANLIB|" Makefile
            echo "Set RANLIB=$RANLIB in Makefile"
        fi
        
        echo "Makefile fixed for RISC-V cross-compilation"
        
        # Verify the fix
        echo "Verification:"
        grep "^CC=" Makefile
        grep "^AR=" Makefile 2>/dev/null || echo "AR not found in Makefile"
        grep "^ARFLAGS=" Makefile 2>/dev/null || echo "ARFLAGS not found in Makefile"
        grep "^RANLIB=" Makefile 2>/dev/null || echo "RANLIB not found in Makefile"
        echo "ARX fix:"
        grep "ARX=" Makefile | head -2
    else
        echo "Warning: Makefile not found, cannot fix compiler settings"
    fi
    
    # After configuration, also fix the ssl subdirectory Makefile
    # SSL subdirectory uses $(AR) $(LIB) $(LIBOBJ) without ARFLAGS
    SSL_MAKEFILE="ssl/Makefile"
    if [ -f "$SSL_MAKEFILE" ]; then
        echo "Fixing ssl/Makefile to include ARFLAGS..."
        
        # Change $(AR) $(LIB) $(LIBOBJ) to $(AR) $(ARFLAGS) $(LIB) $(LIBOBJ)
        sed -i 's|\$(AR) \$(LIB) \$(LIBOBJ)|$(AR) $(ARFLAGS) $(LIB) $(LIBOBJ)|g' "$SSL_MAKEFILE"
        echo "Updated AR call in ssl/Makefile to include ARFLAGS"
        
        # Verify the fix
        echo "SSL Makefile AR line after fix:"
        grep "AR.*LIB.*LIBOBJ" "$SSL_MAKEFILE" || echo "No AR line found in ssl/Makefile"
    else
        echo "Warning: ssl/Makefile not found, skipping ssl directory fix"
    fi
    
else
    # For non-RISC-V builds, use the original configure script
    exec ./configure.orig "$@"
fi
